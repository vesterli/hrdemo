package com.vesterli.hrdemo.foundation.model.entity;

import com.vesterli.hrdemo.foundation.bcbase.EntityImpl;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Timestamp;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.adf.share.security.SecurityContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Mar 18 11:15:28 CET 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmployeesImpl extends EntityImpl {

  /**
   * Add locking logic here.
   */
  private static ADFLogger logger = ADFLogger.createADFLogger(EmployeesImpl.class);


  public void lock() {
    super.lock();
  }

  /**
   * Custom DML update/insert/delete logic here.
   * @param operation the operation type
   * @param e the transaction event
   */
/*  protected void doDML(int operation, TransactionEvent e) {
    CallableStatement cstmt = null;
    if (operation == DML_INSERT) {
      String insStmt = "{call InsertEmp(?,?,?,?)}";
      cstmt = getDBTransaction().createCallableStatement(insStmt, 0);
      try {
        cstmt.setString(1, getFirstName());
        cstmt.setString(2, getLastName());
        cstmt.setString(3, getJobId());
        cstmt.setInteger(4, getDepartmentId());
      }
      catch (Exception ex) {
        // Handle SQL exceptions
      } finally {
        try {
          cstmt.close();
        } catch (SQLException ex) {
          // if error closing, ignore
        }
      }
    }
  }
*/
  /**
   * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
   */
  protected enum AttributesEnum {
    EmployeeId,
    FirstName,
    LastName,
    Email,
    PhoneNumber,
    HireDate,
    JobId,
    Salary,
    CommissionPct,
    ManagerId,
    DepartmentId,
    SalaryString,
    Employees,
    ManagerIdEmployees,
    Departments,
    Departments1,
    Jobs;
    private static AttributesEnum[] vals = null;
    private static final int firstIndex = 0;

    protected int index() {
      return AttributesEnum.firstIndex() + ordinal();
    }

    protected static final int firstIndex() {
      return firstIndex;
    }

    protected static int count() {
      return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
    }

    protected static final AttributesEnum[] staticValues() {
      if (vals == null) {
        vals = AttributesEnum.values();
      }
      return vals;
    }
  }


  public static final int EMPLOYEEID = AttributesEnum.EmployeeId.index();
  public static final int FIRSTNAME = AttributesEnum.FirstName.index();
  public static final int LASTNAME = AttributesEnum.LastName.index();
  public static final int EMAIL = AttributesEnum.Email.index();
  public static final int PHONENUMBER = AttributesEnum.PhoneNumber.index();
  public static final int HIREDATE = AttributesEnum.HireDate.index();
  public static final int JOBID = AttributesEnum.JobId.index();
  public static final int SALARY = AttributesEnum.Salary.index();
  public static final int COMMISSIONPCT = AttributesEnum.CommissionPct.index();
  public static final int MANAGERID = AttributesEnum.ManagerId.index();
  public static final int DEPARTMENTID = AttributesEnum.DepartmentId.index();
  public static final int SALARYSTRING = AttributesEnum.SalaryString.index();
  public static final int EMPLOYEES = AttributesEnum.Employees.index();
  public static final int MANAGERIDEMPLOYEES = AttributesEnum.ManagerIdEmployees.index();
  public static final int DEPARTMENTS = AttributesEnum.Departments.index();
  public static final int DEPARTMENTS1 = AttributesEnum.Departments1.index();
  public static final int JOBS = AttributesEnum.Jobs.index();

  /**
   * This is the default constructor (do not remove).
   */
  public EmployeesImpl() {
  }

  public String getFirstName() {
    logger.finer("getting first name '" + (String) getAttributeInternal(FIRSTNAME) + "'");
    return (String) getAttributeInternal(FIRSTNAME);
  }

  public void setFirstName(String value) {
    logger.finer("setting first name to '" + value + "'");
    setAttributeInternal(FIRSTNAME, value);
  }


  /**
   * Gets the attribute value for Salary, using the alias name Salary.
   * @return the value of Salary
   */
  public BigDecimal getSalary() {
    throw new JboException("Internal error reading Salary");
  }

  /**
   * Sets <code>value</code> as the attribute value for Salary.
   * @param value value to set the Salary
   */
  public void setSalary(BigDecimal value) {
    throw new JboException("Internal error writing Salary");
  }

  /**
   * Gets the attribute value for SalaryString, using the alias name SalaryString.
   * @return the value of SalaryString
   */
  public String getSalaryString() {
    ADFContext actx = ADFContext.getCurrent();
    SecurityContext sctx = actx.getSecurityContext();
    if (sctx.isUserInRole("salary-admin-role")) {
      return ((BigDecimal) getAttributeInternal(SALARY)).toString();
    } else {
      return "*******";
    }
  }

  /**
   * Sets <code>value</code> as the attribute value for SalaryString.
   * @param value value to set the SalaryString
   */
  public void setSalaryString(String value) {
    try {
      BigDecimal sal = new BigDecimal(value);
      ADFContext actx = ADFContext.getCurrent();
      SecurityContext sctx = actx.getSecurityContext();
      if (sctx.isUserInRole("salary-admin-role")) {
        setAttributeInternal(SALARY, sal);
      } else {
        throw new JboException("User not allowed to change salary");
      }
    } catch (NumberFormatException e) {
      throw new JboException("Salary must be numeric");
    }
  }

  /**
   * @return the associated entity oracle.jbo.RowIterator.
   */
  public RowIterator getEmployees() {
    return (RowIterator) getAttributeInternal(EMPLOYEES);
  }

  /**
   * @return the associated entity EmployeesImpl.
   */
  public EmployeesImpl getManagerIdEmployees() {
    return (EmployeesImpl) getAttributeInternal(MANAGERIDEMPLOYEES);
  }

  /**
   * Sets <code>value</code> as the associated entity EmployeesImpl.
   */
  public void setManagerIdEmployees(EmployeesImpl value) {
    setAttributeInternal(MANAGERIDEMPLOYEES, value);
  }

  /**
   * @return the associated entity oracle.jbo.RowIterator.
   */
  public RowIterator getDepartments() {
    return (RowIterator) getAttributeInternal(DEPARTMENTS);
  }

  /**
   * @return the associated entity DepartmentsImpl.
   */
  public DepartmentsImpl getDepartments1() {
    return (DepartmentsImpl) getAttributeInternal(DEPARTMENTS1);
  }

  /**
   * Sets <code>value</code> as the associated entity DepartmentsImpl.
   */
  public void setDepartments1(DepartmentsImpl value) {
    setAttributeInternal(DEPARTMENTS1, value);
  }

  /**
   * @return the associated entity com.vesterli.hrdemo.foundation.bcbase.EntityImpl.
   */
  public EntityImpl getJobs() {
    return (EntityImpl) getAttributeInternal(JOBS);
  }

  /**
   * Sets <code>value</code> as the associated entity com.vesterli.hrdemo.foundation.bcbase.EntityImpl.
   */
  public void setJobs(EntityImpl value) {
    setAttributeInternal(JOBS, value);
  }

  /**
   * @param employeeId key constituent

   * @return a Key object based on given key constituents.
   */
  public static Key createPrimaryKey(Integer employeeId) {
    return new Key(new Object[] { employeeId });
  }

  /**
   * @return the definition object for this instance class.
   */
  public static synchronized EntityDefImpl getDefinitionObject() {
    return EntityDefImpl.findDefObject("com.vesterli.hrdemo.foundation.model.entity.Employees");
  }


  /**
   * Validation method for Employees.
   */
  public boolean validateEmployees() {
    return true;
  }


}

